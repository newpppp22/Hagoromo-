const header = `üëë Hagoromo Otustsuki Vip Users üëë`;

const fs = require("fs");

const vipFilePath = "vip.json";
const changelogFilePath = "changelog.json";

function loadVIPData() {
  try {
    const data = fs.readFileSync(vipFilePath);
    return JSON.parse(data);
  } catch (err) {
    console.error("VIP ‡¶°‡¶æ‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡¶æ ‡¶¨‡¶æ‡¶™‡¶æ‡¶®‡ßç‡¶§ ‡¶π‡¶á‡¶õ‡ßá:", err);
    return {};
  }
}

function saveVIPData(data) {
  try {
    fs.writeFileSync(vipFilePath, JSON.stringify(data, null, 2));
  } catch (err) {
    console.error("VIP ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡¶æ ‡¶π‡¶æ‡¶§ ‡¶™‡ßÅ‡¶á‡ßú‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:", err);
  }
}

function loadChangelog() {
  try {
    const data = fs.readFileSync(changelogFilePath);
    return JSON.parse(data);
  } catch (err) {
    console.error("‡¶ö‡ßá‡¶û‡ßç‡¶ú‡¶≤‡¶ó ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡¶æ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Ç:", err);
    return {};
  }
}

module.exports = {
  config: {
    name: "vip",
    version: "1.0",
    author: "Aryan Chauhan",
    role: 2,
    category: "Config",
    guide: {
      en: "!vip add <uid> - VIP-‡¶§‡ßá ‡¶¢‡ßÅ‡¶ï‡¶æ‡¶á\n!vip rm <uid> - VIP-‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶≤‡¶æ‡¶á\n!vip list - VIP ‡¶ó‡ßç‡¶Ø‡¶æ‡¶Ç ‡¶¶‡ßá‡¶ñ‡¶æ‡¶á\n!vip changelog - ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™ ‡¶∂‡ßÅ‡¶®‡¶æ‡¶á",
    },
  },

  onStart: async function ({ api, event, args, message, usersData }) {
    const subcommand = args[0];

    if (!subcommand) return;

    let vipData = loadVIPData();

    if (subcommand === "add") {
      const uidToAdd = args[1];
      if (uidToAdd) {
        const userData = await usersData.get(uidToAdd);
        if (userData) {
          const userName = userData.name || "‡¶®‡ßá‡¶á‡¶Æ‡¶≤‡ßá‡¶∏ ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï";
          message.reply(`${header}
‡¶ì‡¶á ${userName} (${uidToAdd}) ‡¶è‡¶ñ‡¶® VIP! ‡¶Æ‡¶æ‡¶•‡¶æ ‡¶â‡¶Å‡¶ö‡ßÅ ‡¶ï‡¶∞‡ßá ‡¶ö‡¶≤ ‡¶≠‡¶æ‡¶á!`);
          api.sendMessage(`${header}
‡¶ì‡¶á ${userName} (${uidToAdd}), ‡¶è‡¶ñ‡¶® ‡¶§‡ßÅ‡¶á VIP! ‡¶∏‡ßç‡¶™‡ßá‡¶∂‡¶æ‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞‡¶∏‡ßç‚Äå ‡¶Ö‡¶®!`, uidToAdd);
          Object.keys(vipData).forEach(async (uid) => {
            if (uid !== uidToAdd) {
              const vipUserData = await usersData.get(uid);
              if (vipUserData) {
                const vipUserName = vipUserData.name || "‡¶Ö‡¶ö‡ßá‡¶®‡¶æ VIP";
                api.sendMessage(`${header}
‡¶ì‡¶á VIP ‡¶ó‡ßç‡¶Ø‡¶æ‡¶Ç! ‡¶¶‡¶≤‡ßá ‡¶¢‡ßÅ‡¶ï‡¶õ‡ßá ${userName} (${uidToAdd}) ‚Äî ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Æ‡¶æ‡¶§ ‡¶¶‡ßá, ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶™!`, uid);
              }
            }
          });
          vipData[uidToAdd] = true;
          saveVIPData(vipData);
        } else {
          message.reply(`${header}
UID ${uidToAdd} ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶á‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ ‡¶≠‡¶æ‡¶á ‚Äî ‡¶≠‡ßÇ‡¶§‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶õ‡ßã‡¶∏ ‡¶®‡¶æ‡¶ï‡¶ø?`);
        }
      } else {
        message.reply(`${header}
UID ‡¶¶‡ßá ‡¶Ü‡¶ó‡ßá! ‡¶¨‡¶æ‡¶§‡¶æ‡¶∏‡ßá VIP ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶®‡¶æ ‡¶≠‡¶æ‡¶á!`);
      }
    } else if (subcommand === "rm") {
      const uidToRemove = args[1];
      if (uidToRemove && vipData[uidToRemove]) {
        delete vipData[uidToRemove];
        saveVIPData(vipData);
        const userData = await usersData.get(uidToRemove);
        if (userData) {
          const userName = userData.name || "‡¶Ö‡¶ö‡ßá‡¶®‡¶æ ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï";
          message.reply(`${header}
${userName} (${uidToRemove}) VIP ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶•‡¶æ‡¶á‡¶ï‡¶æ ‡¶ñ‡¶æ‡¶Å‡¶á‡¶õ‡ßá!`);
          api.sendMessage(`${header}
${userName} (${uidToRemove}), VIP ‡¶≤‡¶æ‡¶á‡¶´ ‡¶∂‡ßá‡¶∑! ‡¶è‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶® ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶¶‡¶æ‡¶Å‡ßú‡¶æ!`, uidToRemove);
          Object.keys(vipData).forEach(async (uid) => {
            if (uid !== uidToRemove) {
              const vipUserData = await usersData.get(uid);
              if (vipUserData) {
                const vipUserName = vipUserData.name || "‡¶≠‡¶æ‡¶á‡¶™‡ßã VIP";
                api.sendMessage(`${header}
${userName} (${uidToRemove}) VIP ‡¶õ‡¶ø‡¶≤‡ßã, ‡¶è‡¶ñ‡¶® ‡¶®‡¶æ‡¶á! ‡¶Æ‡¶® ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶®‡¶æ, ‡¶≤‡¶æ‡¶á‡¶´ ‡¶Ø‡¶æ‡ßü!`, uid);
              }
            }
          });
        } else {
          message.reply(`${header}
UID ${uidToRemove} ‡¶§‡ßã ‡¶¶‡ßá‡¶ñ‡¶ø ‡¶â‡¶ß‡¶æ‡¶ì! ‡¶ï‡¶æ‡¶ï‡ßá ‡¶´‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ?`);
        }
      } else {
        message.reply(`${header}
UID ‡¶†‡¶ø‡¶ï‡¶†‡¶æ‡¶ï ‡¶¶‡ßá, ‡¶´‡¶æ‡¶≤‡¶æ‡¶á‡¶§‡ßá ‡¶π‡¶á‡¶≤‡ßá ‡¶†‡¶ø‡¶ï ‡¶Æ‡¶§ ‡¶ö‡¶ø‡¶®‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡ßü!`);
      }
    } else if (subcommand === "list") {
      const vipList = await Promise.all(Object.keys(vipData).map(async (uid) => {
        const userData = await usersData.get(uid);
        if (userData) {
          const userName = userData.name || "‡¶®‡ßá‡¶á‡¶Æ‡¶≤‡ßá‡¶∏ VIP";
          return `‚Ä¢ ${userName} (${uid})`;
        } else {
          return `‚Ä¢ ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ VIP (${uid})`;
        }
      }));

      if (vipList.length > 0) {
        message.reply(`${header}

¬ª VIP ‡¶ó‡ßç‡¶Ø‡¶æ‡¶Ç ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶∞‡¶æ:

${vipList.join(`\n`)}

‡¶®‡¶§‡ßÅ‡¶® VIP ‡¶¢‡ßÅ‡¶ï‡¶æ‡¶á‡¶§‡ßá ‡¶¨‡¶æ ‡¶´‡¶æ‡¶≤‡¶æ‡¶á‡¶§‡ßá ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ: !vip add/rm <uid>`);
      } else {
        message.reply(`${header}
VIP ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶ñ‡¶æ‡¶≤‡¶ø ‚Äî ‡¶ï‡ßá‡¶∞‡ßã ‡¶®‡¶æ‡¶á, ‡¶ï‡¶ø‡¶ö‡ßç‡¶õ‡ßÅ ‡¶®‡¶æ‡¶á! ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶π‡¶æ‡¶ì‡ßü‡¶æ!`);
      }
    } else if (subcommand === "changelog") {
      const changelogData = loadChangelog();

      if (changelogData) {
        const changelogEntries = Object.keys(changelogData).filter((version) => parseFloat(version) >= 1.0);

        if (changelogEntries.length > 0) {
          const changelogText = changelogEntries.map((version) => `‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ${version}: ${changelogData[version]}`).join('\n');
          message.reply(`${header}
‡¶ö‡¶≤‡¶§‡ßá‡¶õ‡ßá ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶®: ${module.exports.config.version}
‡¶ö‡ßá‡¶û‡ßç‡¶ú ‡¶ï‡¶æ‡¶π‡¶ø‡¶®‡ßÄ:
${changelogText}`);
        } else {
          message.reply(`${header}
‡¶ö‡¶≤‡¶§‡ßá‡¶õ‡ßá ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶®: ${module.exports.config.version}
‡¶ö‡ßá‡¶û‡ßç‡¶ú‡¶≤‡¶ó ‡¶ñ‡¶æ‡¶≤‡¶ø ‚Äî ‡¶°‡ßá‡¶≠‡¶≤‡¶™‡¶æ‡¶∞ ‡¶ü‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶ò‡ßÅ‡¶Æ‡¶æ‡¶á‡¶§‡ßá‡¶õ‡ßá!`);
        }
      } else {
        message.reply("‡¶ö‡ßá‡¶û‡ßç‡¶ú‡¶≤‡¶ó ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶á‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ ‡¶≠‡¶æ‡¶á, ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶æ ‡¶¨‡ßã‡¶ß‡¶π‡ßü ‡¶Æ‡¶æ‡¶∞ ‡¶ñ‡¶æ‡¶á‡¶õ‡ßá!");
      }
    }
  }
};
